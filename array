1  Minimize the heights
Input:
K = 2, N = 4
Arr[] = {1, 5, 8, 10}
Output: 5
Explanation: The array can be modified as 
{3, 3, 6, 8}. The difference between 
the largest and the smallest is 8-3 = 5.

 int getMinDiff(int arr[], int n, int k) {
        // code here
        sort(arr,arr+n);
        int ans=arr[n-1]-arr[0];
        int small=arr[0]+k;
        int big=arr[n-1]-k;
        if(small>big)
        {
            swap(small,big);
        }
        for(int i=1;i<n-1;i++)
        {
            int sub=arr[i]-k;
            int add=arr[i]+k;
            if(sub>=small || add<=big){
                
            
            continue;
            }
            if(big-sub <= add-small)
            {
                small=sub;
            }
            else
            {
                big=add;
            }
        }
        return min(ans,big-small);
    }
    
    
    
    
    
    
   2 Minimum number of jumps 
   Example:
Input:
2
11
1 3 5 8 9 2 6 7 6 8 9
6
1 4 3 2 6 7
Output:
3
2

Explanation:
Testcase 1: First jump from 1st element, and we jump to 2nd element with value 3. Now,
from here we jump to 5h element with value 9. and from here we will jump to last.

DP......

int minJumps(int arr[], int n){
    // Your code here
    int dp[n];
    for(int i=0;i<n;i++)
    {
        dp[i]=INT_MAX;
    }
    dp[0]=0;
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<i;j++)
        {
            if(dp[j]!=INT_MAX && arr[j]+j>=i)
            {
                if(dp[j]+1<dp[i])
                {
                    dp[i]=dp[j]+1;
                }
            }
        }
    }
    if(dp[n-1]!=INT_MAX)
    {
        
    
return dp[n-1];
}else
{
    return -1;
}
}




3 Find the Duplicate Number
Input: nums = [1,3,4,2,2]
Output: 2
 int findDuplicate(vector<int>& nums) {
        int slow=nums[0];
        int fast=nums[0];
        do
         {
             slow=nums[slow];
             fast=nums[nums[fast]];
             
         } while(slow!=fast);
       fast=nums[0];
        while(slow!=fast)
        {
            slow=nums[slow];
            fast=nums[fast];
        }
        return slow;
    }
